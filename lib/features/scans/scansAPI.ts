// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"; 
import { Scan } from '@/app/types/Scan';
import { Note } from '@/app/types/Note';

// Define a service using a base URL and expected endpoints
export const scansApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: "http://localhost:5018" }),
  reducerPath: "scansApi",
  // Tag types are used for caching and invalidation.
  //tagTypes: ["Scans"],
  
  endpoints: (build) => ({
    // Supply generics for the return type (in this case `QuotesApiResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    getScans: build.query<Scan[], void>({
      query: () => `/scans`
    }),
    
    getNotesByScanId: build.query<Note[], string>({
      query: (scanId) => `/scans/${scanId}/notes?timestamp=${new Date().getTime()}`
    }),

    postNotesByScanId: build.mutation<Note, Note>({
      query: (Note) => ({
        url: `/scans/${Note.scanId}/notes`,
        method: "POST",
        body: Note,
      }),
    })
  }),
});


// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useGetScansQuery, useGetNotesByScanIdQuery, usePostNotesByScanIdMutation } = scansApiSlice;
